load("~/.Rhistory")
load("C:/Users/Kentryo/Downloads/Raw data and experimental design/.RData")
y <- DGEList(counts=data, group=Treat)
y <- DGEList(counts=data1, group=Treat)
View(data)
View(data1)
View(data)
View(data1)
keep <- rowSums(cpm(y)>2) >= 8
str(keep)
table(keep)
head(keep)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y$samples
plotMDS(y)
design <- model.matrix(~Reps+Reps:Treat)
logFC <- predFC(y,design,prior.count=1,dispersion=0.05)
head(logFC)
dim(logFC)
cor(logFC[,9:16])
?model.matrix
design <- model.matrix(~Reps+Treat)
rownames(design) <- colnames(y)
design
y <- estimateDisp(y, design, robust=TRUE)
search()
fit <- glmQLFit(y, design, robust=TRUE)
install.packages("statmod")
fit <- glmQLFit(y, design, robust=TRUE)
plotQLDisp(fit)
qlf <- glmQLFTest(fit, coef=2:8)
topTags(qlf)
FDR <- p.adjust(qlf$table$PValue, method="BH")
sum(FDR < 0.05)
qlf <- glmQLFTest(fit)
topTags(qlf)
top <- rownames(topTags(qlf))
cpm(y)[top,]
summary(dt <- decideTestsDGE(qlf))
isDE <- as.logical(dt)
DEnames <- rownames(y)[isDE]
plotSmear(qlf, de.tags=DEnames)
abline(h=c(-1,1), col="blue")
view(denames)
head(denames)
load("C:/Users/Kentryo/Downloads/Raw data and experimental design/.RData")
mdsplot(y)
search()
plotmds(y)
plotMDS(y)
ls()
#setup path and read data file
path <- getwd()
path <- paste(path,"/Payment.csv",sep="")
data <- read.csv(path)
data_newyork <- subset(data, Provider.State=='NY')
#plot data_newyork p between mean covered charges (Average.Covered.Charges) and mean total payments (Average.Total.Payments) in New York
plot(data_newyork$Average.Covered.Charges,data_newyork$Average.Total.Payments, xlab = "Average.Covered.Charges", ylab = "Average.Total.Payments", main = "New York")
abline(lm(data_newyork$Average.Total.Payments~data_newyork$Average.Covered.Charges))
#plot the relationship between mean covered charges (Average.Covered.Charges) and mean total payments (Average.Total.Payments) vary by medical condition (DRG.Definition) and the state in which care was received (Provider.State)?
load("~/coursera/Reproducible research/plotting practice/.Rhistory")
load("~/coursera/Reproducible research/plotting practice/.RData")
str(data)
setwd("~/coursera/Reproducible research/reproducible-research-CJ2")
list()
dir()
data_raw <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
View(data_raw)
str(data_raw)
levels(data_raw$PROPDMGEXP)
?aggregate
data_fatalities <- aggregate(FATALITIES ~ EVTYPE, data = data_raw, FUN = sum)
View(data_fatalities)
plot(EVTYPE, FATALITIES, data = data_fatalities)
View(data_fatalities)
plot(data_fatalities$EVTYPE, data_fatalities$FATALITIES)
barplot(data_fatalities$EVTYPE, data_fatalities$FATALITIES)
boxplot(data_fatalities$EVTYPE, data_fatalities$FATALITIES)
boxplot(data_fatalities$EVTYPE, data_fatalities$FATALITIES)
data_fatalities_ascending <- data_fatalities[order(FATALITIES), ]
data_fatalities_ascending <- data_fatalities[order(data_fatalities$FATALITIES), ]
View(data_fatalities_ascending)
data_fatalities_descending <- data_fatalities[order(-data_fatalities$FATALITIES), ]
View(data_fatalities_descending)
?barplot
barplot(data_fatalities_descending$FATALITIES[1:20])
library("ggplot")
library("ggplot2")
bar_fatalities <- ggplot(data = data_fatalities_descending[1:20], aes(x = EVTYPE, y = FATALITIES)) +geom_bar(stat = "identity")
bar_fatalities <- ggplot(data = data_fatalities_descending[1:20, ], aes(x = EVTYPE, y = FATALITIES)) +geom_bar(stat = "identity")
bar_fatalities
bar_fatalities <- ggplot(data = data_fatalities_descending[1:20, ], aes(x = EVTYPE, y = FATALITIES)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90, hjust=1))
bar_fatalities
bar_fatalities <- ggplot(data = data_fatalities_descending[1:20, ], aes(x = EVTYPE, y = FATALITIES)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1))
bar_fatalities
bar_fatalities <- ggplot(data = data_fatalities_descending[1:20, ], aes(x = EVTYPE, y = FATALITIES)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1)) + labs(title = "TOP 20 EVENTS CAUSING FATALITIES"")
1
bar_fatalities <- ggplot(data = data_fatalities_descending[1:20, ], aes(x = EVTYPE, y = FATALITIES)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1)) + labs(title = "TOP 20 EVENTS CAUSING FATALITIES", x = "EVENT TYPE", y = "TOTAL FATALITIES")
bar_fatalities
data_injuries <- aggregate(INJURIES ~ EVTYPE, data = data_raw, FUN = sum)
data_injuries_descending <- data_injuries[order(-data_injuries$INJURIES), ]
bar_injuries <- ggplot(data = data_injuries_descending[1:20, ], aes(x = EVTYPE, y = INJURIES)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1)) + labs(title = "TOP 20 EVENTS CAUSING INJURIES", x = "EVENT TYPE", y = "TOTAL INJURIES")
bar_injuries
data_raw[data_raw$PROPDMGEXP == "h"|"H"]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h"|"H"]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "h"||"H"]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h"||"H"]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "h"]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h"]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "h"|"H", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h"|"H", ]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "h"||"H", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h"||"H", ]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG * 100
View(data_raw)
data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG * 100
data_raw$PROPDMG2 <- NA
data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG * 100
levels(data_raw$PROPDMGEXP)
data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "H", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "H", ]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "K", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "K", ]$PROPDMG * 1000
data_raw[data_raw$PROPDMGEXP == "m", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "m", ]$PROPDMG * 1000000
data_raw[data_raw$PROPDMGEXP == "M", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "M", ]$PROPDMG * 1000000
data_raw[data_raw$PROPDMGEXP == "B", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "B", ]$PROPDMG * 1000000000
levels(data_raw$CROPDMGEXP)
data_raw$CROPDMG2 <- NA
data_raw[data_raw$CROPDMGEXP == "k", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "k", ]$PROPDMG * 1000
data_raw[data_raw$CROPDMGEXP == "K", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "K", ]$PROPDMG * 1000
data_raw[data_raw$CROPDMGEXP == "m", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "m", ]$PROPDMG * 1000000
data_raw[data_raw$CROPDMGEXP == "M", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "M", ]$PROPDMG * 1000000
data_raw[data_raw$CROPDMGEXP == "B", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "B", ]$PROPDMG * 1000000000
data_raw$CROPDMG2 <- NA
data_raw[data_raw$CROPDMGEXP == "k", ]$PROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "k", ]$PROPDMG * 1000
data_raw[data_raw$CROPDMGEXP == "K", ]$PROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "K", ]$PROPDMG * 1000
data_raw[data_raw$CROPDMGEXP == "m", ]$PROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "m", ]$PROPDMG * 1000000
data_raw[data_raw$CROPDMGEXP == "M", ]$PROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "M", ]$PROPDMG * 1000000
data_raw[data_raw$CROPDMGEXP == "B", ]$PROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "B", ]$PROPDMG * 1000000000
data_raw$PROPDMG2 <- NA
data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "h", ]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "H", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "H", ]$PROPDMG * 100
data_raw[data_raw$PROPDMGEXP == "K", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "K", ]$PROPDMG * 1000
data_raw[data_raw$PROPDMGEXP == "m", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "m", ]$PROPDMG * 1000000
data_raw[data_raw$PROPDMGEXP == "M", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "M", ]$PROPDMG * 1000000
data_raw[data_raw$PROPDMGEXP == "B", ]$PROPDMG2 <- data_raw[data_raw$PROPDMGEXP == "B", ]$PROPDMG * 1000000000
data_raw$CROPDMG2 <- NA
data_raw[data_raw$CROPDMGEXP == "k", ]$CROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "k", ]$CROPDMG * 1000
data_raw[data_raw$CROPDMGEXP == "K", ]$CROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "K", ]$CROPDMG * 1000
data_raw[data_raw$CROPDMGEXP == "m", ]$CROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "m", ]$CROPDMG * 1000000
data_raw[data_raw$CROPDMGEXP == "M", ]$CROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "M", ]$CROPDMG * 1000000
data_raw[data_raw$CROPDMGEXP == "B", ]$CROPDMG2 <- data_raw[data_raw$CROPDMGEXP == "B", ]$CROPDMG * 1000000000
data_raw$ECONDMG <- data_raw$PROPDMG2 + data_raw$CROPDMG2
data_raw$PROPDMG2[is.na(data_raw$PROPDMG2)] <- 0
data_raw$PROPDMG2[is.na(data_raw$PROPDMG2)] <- 0
data_raw$CROPDMG2[is.na(data_raw$CROPDMG2)] <- 0
data_raw$ECONDMG <- data_raw$PROPDMG2 + data_raw$CROPDMG2
data_econdmg <- aggregate(ECONDMG ~ EVTYPE, data = data_raw, FUN = sum)
data_econdmg_descending <- data_econdmg[order(-data_econdmg$ECONDMG), ]
View(data_econdmg_descending)
bar_econdmg <- <- ggplot(data = data_econdmg_descending[1:20, ], aes(x = EVTYPE, y = ECONDMG)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1)) + labs(title = "TOP 20 EVENTS CAUSING ECONOMIC DAMAGE", x = "EVENT TYPE", y = "TOTAL ECONOMIC DAMAGE")
bar_econdmg <- ggplot(data = data_econdmg_descending[1:20, ], aes(x = EVTYPE, y = ECONDMG)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1)) + labs(title = "TOP 20 EVENTS CAUSING ECONOMIC DAMAGE", x = "EVENT TYPE", y = "TOTAL ECONOMIC DAMAGE")
bar_econdmg
